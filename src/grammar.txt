program => declaration* EOF


# Variable Decl
declaration => classDecl | funcDecl | varDecl | statement

classDecl => "class" IDENTIFIER ( "extends" IDENTIFIER )? "{" function* "}"

funcDecl => "function" function

varDecl => ( "var" | "final" ) IDENTIFIER ( "=" expression? ) ";"

function => IDENTIFIER "(" parameters? ")" block
parameters => IDENTIFIER ( "," IDENTIFIER )*
parameterexpressions => expression ( "," expression )*


# Program
statement => exprStmt | ifStmt | exitStmt | whileStmt | returnStmt | breakStmt | forStmt | switchStmt | doWhileStmt | forRepStmt | deleteVarStmt | block

exprStmt => expression ";"

ifStmt => "if" "(" expression ")" statement ( "else" statement )?

forStmt => "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement
doWhileStmt => "do" statement "while" "(" expression ")" ";"
forRepStmt => "forrep" "(" parameterexpressions ")" statement
whileStmt => "while" "(" expression ")" statement
breakStmt => "break" ";"

deleteVarStmt => "deletevariable" IDENTIFIER ";"

switchStmt => "switch" "(" expression ")" "{" switchCaseFunc* defaultCaseFunc? "}"
switchCaseFunc => "case" "(" parameterexpressions ")" statement
defaultCaseFunc => "default" statement

block => "{" declaration* "}"
returnStmt => "return" expression? ";"
exitStmt => "exit" expression? ";"


# Expression
expression => ( "lambda" "(" parameters? ")" ":" )? ternary


# Ternary
ternary => postfix ( "?" postfix ":" ternary )?


# Assignment
postfix => assignment ( "++" | "--" )?
assignment => ( ( call "." )? IDENTIFIER ( "+=" | "-=" | "*=" | "/=" | "^=" | "%=" ) expression ) | logic_or


# Logic
logic_or => logic_and ( "or" logic_and )*
logic_and => equality ( "and" equality )*
equality => comparison ( ( "!=" | "==" ) comparison )*
comparison => addition ( ( ">" | ">=" | "<" | "<=" ) addition )*


# Math
addition => multiplication ( ( "-" | "+" ) multiplication )*
multiplication => power ( ( "/" | "*" | "%" ) power )*
power => type_change ( "^" type_change )*


# Unary
type_change => ( "@" STRING ":" type_change ) | unary
unary => ( "!" | "-" ) unary | call


# Functions
call => primary ( ( "(" arguments? ")" )* | "." IDENTIFIER )
arguments => expression ( "," expression )*


# Primary
primary => NUMBER | STRING | IDENTIFIER | "false" | "true" | "this" | "NaV" | "(" expression ")" | "|" expression "|" | "superClass" "." IDENTIFIER